/////////////////////////////////////////////////////////////////////////////////////////////////
// Audio processing variables
//	product: DJS-500 sampler
//
//
//
//
//	Author: Anatska Andrei
//
/////////////////////////////////////////////////////////////////////////////////////////////////

#include "stdint.h"

uint16_t PCM_2[2];
int16_t LR[2][4];
float c0, c1, c2, c3, r0, r1, r2, r3;
int32_t even1, even2, odd1, odd2;
uint32_t all_long = 0;						//Long sample in samples (44100 per second)
uint32_t play_adr = 0;						//Playing adress in samples (44100 per second)
uint32_t sdram_adr = 0;
uint8_t SAMPLE[4];
uint16_t PCM[206][8192][2]					__attribute__ ((section(".sdram")));;
uint16_t sai_pitch = 0;	// 10000 = 100% step 0,01%
uint16_t pitch = 0;	// 10000 = 100% step 0,01%	
uint32_t tmp_pitch;
uint32_t position = 0;
uint8_t step_position = 0;
float SAMPLE_0, SAMPLE_1;
float T;
uint8_t	end_of_track = 0;			//end track flag
uint16_t TIM_DIVIDER = 0; 
uint8_t TIM_LED_DIV = 0;
uint32_t music_tim = 0xFFFFFFFF;			//timer for bpm tick in ms
uint32_t SQN[3] = {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF};
uint32_t SMPL_STRT = 0;
uint32_t SHFT_STRT = 0;				//shift start for quantize
uint8_t force_start_sample = 0;		//force start for quantize starting
uint8_t BEAT_CNT = 0;   //0...15 max
uint8_t PARTBEAT_CNT = 0;   //0...3 max
uint8_t end_one_shot_seq = 0;
uint8_t ATT_LVL = 0xFF;

const static float COEF[8] = {			//////optimal 2x
									0.45868970870461956,
									0.04131401926395584,
									0.48068024766578432,
									0.17577925564495955,
									-0.246185007019907091, 
									0.24614027139700284,
									-0.36030925263849456,
									0.10174985775982505
									};

									
const static float ATNTR[256] = {
0.90000,
0.88969,
0.87951,
0.86944,
0.85949,
0.84965,
0.83992,
0.83031,
0.82080,
0.81141,
0.80212,
0.79294,
0.78386,
0.77489,
0.76602,
0.75725,
0.74858,
0.74001,
0.73154,
0.72317,
0.71489,
0.70671,
0.69862,
0.69062,
0.68271,
0.67490,
0.66717,
0.65954,
0.65199,
0.64452,
0.63715,
0.62985,
0.62264,
0.61552,
0.60847,
0.60150,
0.59462,
0.58781,
0.58108,
0.57443,
0.56786,
0.56136,
0.55493,
0.54858,
0.54230,
0.53609,
0.52995,
0.52389,
0.51789,
0.51196,
0.50610,
0.50031,
0.49458,
0.48892,
0.48332,
0.47779,
0.47232,
0.46692,
0.46157,
0.45629,
0.45106,
0.44590,
0.44080,
0.43575,
0.43076,
0.42583,
0.42096,
0.41614,
0.41137,
0.40667,
0.40201,
0.39741,
0.39286,
0.38836,
0.38392,
0.37952,
0.37518,
0.37088,
0.36664,
0.36244,
0.35829,
0.35419,
0.35014,
0.34613,
0.34217,
0.33825,
0.33438,
0.33055,
0.32677,
0.32302,
0.31933,
0.31567,
0.31206,
0.30849,
0.30495,
0.30146,
0.29801,
0.29460,
0.29123,
0.28790,
0.28460,
0.28134,
0.27812,
0.27494,
0.27179,
0.26868,
0.26560,
0.26256,
0.25956,
0.25659,
0.25365,
0.25075,
0.24788,
0.24504,
0.24223,
0.23946,
0.23672,
0.23401,
0.23133,
0.22868,
0.22606,
0.22348,
0.22092,
0.21839,
0.21589,
0.21342,
0.21098,
0.20856,
0.20617,
0.20381,
0.20148,
0.19917,
0.19689,
0.19464,
0.19241,
0.19021,
0.18803,
0.18588,
0.18375,
0.18165,
0.17957,
0.17751,
0.17548,
0.17347,
0.17149,
0.16952,
0.16758,
0.16566,
0.16377,
0.16189,
0.16004,
0.15821,
0.15640,
0.15461,
0.15284,
0.15109,
0.14936,
0.14765,
0.14596,
0.14429,
0.14264,
0.14100,
0.13939,
0.13779,
0.13622,
0.13466,
0.13311,
0.13159,
0.13008,
0.12860,
0.12712,
0.12567,
0.12423,
0.12281,
0.12140,
0.12001,
0.11864,
0.11728,
0.11594,
0.11461,
0.11330,
0.11200,
0.11072,
0.10945,
0.10820,
0.10696,
0.10574,
0.10453,
0.10333,
0.10215,
0.10098,
0.09982,
0.09868,
0.09755,
0.09643,
0.09533,
0.09424,
0.09316,
0.09209,
0.09104,
0.08999,
0.08896,
0.08795,
0.08694,
0.08594,
0.08496,
0.08399,
0.08303,
0.08208,
0.08114,
0.08021,
0.07929,
0.07838,
0.07748,
0.07660,
0.07572,
0.07485,
0.07400,
0.07315,
0.07231,
0.07148,
0.07067,
0.06986,
0.06906,
0.06827,
0.06749,
0.06671,
0.06595,
0.06519,
0.06445,
0.06371,
0.06298,
0.06226,
0.06155,
0.06084,
0.06015,
0.05946,
0.05878,
0.05810,
0.05744,
0.05678,
0.05613,
0.05549,
0.05485,
0.05423,
0.05360,
0.05299,
0.05238,
0.05178,
0.05119,
0.05061,
0.05003,
0.04945,
0.04889,
0.04833,
0.04777
};





/* Effects variables ---------------------------------------------------------*/
uint8_t dk;
uint8_t trans_mute = 0;
uint8_t previous_trans_mute = 0;
uint8_t inv_VR_LEVEL;
uint32_t vlevel_mux;
uint32_t mbp_mux;
uint8_t fade = 0;



const static float ATT[24] = 
{
0.0000,
0.0434,
0.0869,
0.1304,
0.1739,
0.2173,
0.2608,
0.3043,
0.3478,
0.3913,
0.4347,
0.4782,
0.5217,
0.5652,
0.6086,
0.6521,
0.6956,
0.7391,
0.7826,
0.8260,
0.8695,
0.9130,
0.9565,
1.0000
};


const static float VR_POS[128] = {
0.00001,
0.00787,
0.01574,
0.02362,
0.03149,
0.03937,
0.04724,
0.05511,
0.06299,
0.07086,
0.07874,
0.08661,
0.09448,
0.10236,
0.11023,
0.11811,
0.12598,
0.13385,
0.14173,
0.14960,
0.15748,
0.16535,
0.17322,
0.18110,
0.18897,
0.19685,
0.20472,
0.21259,
0.22047,
0.22834,
0.23622,
0.24409,
0.25196,
0.25984,
0.26771,
0.27559,
0.28346,
0.29133,
0.29921,
0.30708,
0.31496,
0.32283,
0.33070,
0.33858,
0.34645,
0.35433,
0.36220,
0.37007,
0.37795,
0.38582,
0.39370,
0.40157,
0.40944,
0.41732,
0.42519,
0.43307,
0.44094,
0.44881,
0.45669,
0.46456,
0.47244,
0.48031,
0.48818,
0.49606,
0.50393,
0.51181,
0.51968,
0.52755,
0.53543,
0.54330,
0.55118,
0.55905,
0.56692,
0.57480,
0.58267,
0.59055,
0.59842,
0.60629,
0.61417,
0.62204,
0.62992,
0.63779,
0.64566,
0.65354,
0.66141,
0.66929,
0.67716,
0.68503,
0.69291,
0.70078,
0.70866,
0.71653,
0.72440,
0.73228,
0.74015,
0.74803,
0.75590,
0.76377,
0.77165,
0.77952,
0.78740,
0.79527,
0.80314,
0.81102,
0.81889,
0.82677,
0.83464,
0.84251,
0.85039,
0.85826,
0.86614,
0.87401,
0.88188,
0.88976,
0.89763,
0.90551,
0.91338,
0.92125,
0.92913,
0.93700,
0.94488,
0.95275,
0.96062,
0.96850,
0.97637,
0.98425,
0.99212,
0.99999};


float SM0, SM1;


//////////////////////////////Moog filter
float in1, in2, in3, in4, out1, out2, out3, out4;
float fcutoff, resonanse;





////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



